{
  "hash": "8126de4c0c53a98ee55596b5922614b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to pivot datasets\"\nsubtitle: \"A guide to using **pivot_longer()** and **pivot_wider()** in **{tidyr}**\"\nauthor:\n  - name: Tan Gandhara\ndate: 06-08-2024\ncategories: [R, tidyr, pivoting] \nimage: logo.png\ndraft: false\nformat: html\n---\n\n\n\n### Why, oh why?\n\nI've spent quite a few years working with data in R but was reminded of the brain fog that overcomes me each time I want to pivot any data when I saw Jörn's [post on Bluesky](https://bsky.app/profile/jaquent.bsky.social/post/3kuafvfcswm2h):\n\n```{=html5}\n<blockquote class=\"bluesky-embed\" data-bluesky-uri=\"at://did:plc:mkrvmb5nkkarnvlgzqavbpim/app.bsky.feed.post/3kuafvfcswm2h\" data-bluesky-cid=\"bafyreiftxnacrhkgluezfyskyrdrhfsst7ax7zuhah6mtlbzz77yw3wyfy\"><p lang=\"en\">Will ever I be able to convert data between wide and long format in #rstats without googling?</p>&mdash; Jörn Alexander Quent (<a href=\"https://bsky.app/profile/did:plc:mkrvmb5nkkarnvlgzqavbpim?ref_src=embed\">@jaquent.bsky.social</a>) <a href=\"https://bsky.app/profile/did:plc:mkrvmb5nkkarnvlgzqavbpim/post/3kuafvfcswm2h?ref_src=embed\">Jun 6, 2024 at 7:40</a></blockquote><script async src=\"https://embed.bsky.app/static/embed.js\" charset=\"utf-8\"></script>\n```\nI regularly use Excel and Power BI at work and pivoting can be pretty simple in Power Query ([here's the answer](https://support.microsoft.com/en-gb/office/pivot-columns-power-query-abc9c8da-3be9-44c4-886e-0be331ab387a) in case you're wondering) but this site is a Microsoft-free zone so I'll show you how to do in RStudio.\n\n### Enter the Tidyverse\n\nFor this guide we're using the **{tidyr}** package from **{tidyverse}** so let's get them loaded up and set up a dataset for use in this guide:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nindex <- seq(1:10)\np1 <- runif(10,1,50)\np2 <- runif(10,5,70)\np3 <- runif(10,7,90)\ndf <- tibble(index,p1,p2,p3)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   index    p1    p2    p3\n   <int> <dbl> <dbl> <dbl>\n 1     1 44.4   66.3  60.5\n 2     2 25.0   29.9  73.2\n 3     3  4.50  69.8  34.7\n 4     4 12.3   46.0  13.0\n 5     5 32.1   20.2  78.4\n 6     6 41.9   62.4  22.2\n 7     7 13.1   41.9  52.8\n 8     8 18.3   33.7  33.7\n 9     9 16.5   52.8  37.5\n10    10 26.5   63.3  28.3\n```\n\n\n:::\n:::\n\n\n\nNow, let's say we want to everything apart from the `index` column to be reshaped into a longer tibble where the `p` labels are in a column called `class` and the actual observations for each row are in a column called `values`. Using the `pivot_longer()` function we could do something like this were we select everything apart from `index` and column names are assigned using the `names_to` argument and values using `values_to`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  pivot_longer(!index, \n               names_to = \"class\", \n               values_to = \"value\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 3\n   index class value\n   <int> <chr> <dbl>\n 1     1 p1    44.4 \n 2     1 p2    66.3 \n 3     1 p3    60.5 \n 4     2 p1    25.0 \n 5     2 p2    29.9 \n 6     2 p3    73.2 \n 7     3 p1     4.50\n 8     3 p2    69.8 \n 9     3 p3    34.7 \n10     4 p1    12.3 \n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n\nOther ways of achieving this same result are by selecting specific columns from their column index; **{tidyselect}**'s [selection helpers](https://tidyselect.r-lib.org/reference/starts_with.html); or a regexp using the `names_pattern` argument:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use column index to select columns\ndf |> \n  pivot_longer(cols = c(2:4),\n               names_to = \"class\",\n               values_to = \"values\")\n\n\n# Use starts_with to select columns\ndf |> \n  pivot_longer(cols = starts_with(\"p\"),\n               names_to = \"class\",\n               values_to = \"values\")\n\n# Use a regexp to select columns\ndf |> \n  pivot_longer(cols = c(2:4),\n               names_to = \"class\",\n               names_pattern = \"^p(.*)\",\n               values_to = \"values\")\n```\n:::\n\n\n\nNow let's say that we have the same data in a long format, using `df2,` but want to use it in a wide format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- df |> \n  pivot_longer(cols = starts_with(\"p\"),\n               names_to = \"class\",\n               values_to = \"values\")\n\nhead(df2,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  index class values\n  <int> <chr>  <dbl>\n1     1 p1      44.4\n2     1 p2      66.3\n3     1 p3      60.5\n4     2 p1      25.0\n5     2 p2      29.9\n```\n\n\n:::\n:::\n\n\n\nIn this case, we use `pivot_wider()` and the `names_from` argument to specify which column will be used for the column names, and `values_from` for the values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 |> \n  pivot_wider(names_from = class, \n              values_from = values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   index    p1    p2    p3\n   <int> <dbl> <dbl> <dbl>\n 1     1 44.4   66.3  60.5\n 2     2 25.0   29.9  73.2\n 3     3  4.50  69.8  34.7\n 4     4 12.3   46.0  13.0\n 5     5 32.1   20.2  78.4\n 6     6 41.9   62.4  22.2\n 7     7 13.1   41.9  52.8\n 8     8 18.3   33.7  33.7\n 9     9 16.5   52.8  37.5\n10    10 26.5   63.3  28.3\n```\n\n\n:::\n:::\n\n\n\n### Next steps\n\nThe code above returns the simple tibble we started with but reshaping more complicated datasets might require the use of `names_repair`, `names_sep`, or `names_expand` arguments in `pivot_wider`. To learn about these and other arguments for both of the pivoting functions mentioned above then take a look at the detailed guide [here](https://tidyr.tidyverse.org/articles/pivot.html). Happy pivoting!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}