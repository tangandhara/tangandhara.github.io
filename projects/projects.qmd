---
title: "Time Series Analysis"
author: "Tan Gandhara"
categories: [time series, forecasting, analysis]
image: "revolut-logo-min.jpg"
subtitle: "A time series analysis of Revolut spending data"
format: html
editor: visual
---

## Revolut Spending Data

```{r}
#| label: load-packages
#| include: false
 
library(fpp3)
library(tidyverse)
library(tsibble)
library(readxl)
library(httr)
library(knitr)
library(prophet)

revolut_spending <- read_excel("~/Downloads/revolutspendingondebitcardsdataset230323.xlsx", 
                               sheet = "Spending by sector", col_types = c("date", 
                                                                           "numeric", "numeric", "numeric", 
                                                                           "numeric", "numeric", "numeric", 
                                                                           "numeric"), skip = 2)

rs3 <- revolut_spending[-c(3:8)]


rs3$Date <- as.Date(rs3$Date)
rs3 <- as_tsibble(rs3, index = Date)

```

This time series analysis focuses on [weekly data](https://www.ons.gov.uk/economy/economicoutputandproductivity/output/datasets/revolutspendingondebitcards "Revolut spending on debit cards") available from the Office for National Statistics (ONS). Revolut is one of a number of digital banks that have emerged in recent years and it has around 4.8 million users within the UK financial payment ecosystem. The bank has been providing data to the ONS since the start of the COVID-19 pandemic and the ONS indexes data at the average February 2020 spending level as a pre-pandemic baseline. They also apply a 7-day rolling average to the data to take into account any intra-week spending cyclicality.

While this data is useful for analysing spending changes since 2020 it is important to note a number of limitations:

-   Revolut customers tend to be younger and more metropolitan than the average UK consumer, so spending may not be representative of the overall UK macroeconomic picture.

-   The indices in the dataset do not take into account inflation and are presented on a nominal basis and are not adjusted for price increases over time. According to the ONS the CPI rate was at 1.8% in January 2020 but by January 2023 was at 10.1%.

-   Within the UK financial transaction ecosystem there has been a shift away from cash as a payment medium in favour of card spending. This results in indices being uplifted over time in areas where consumers replace low value cash transactions with low value card transactions instead. This is more likely to be true in this dataset given the demographic profile of Revolut customers.

The full background on methodology and limitations is available from the ONS [here](https://www.ons.gov.uk/economy/economicoutputandproductivity/output/methodologies/usingrevolutcardholderdatatoderiverealtimeindicatorsofconsumerspendingqmi "Using Revolut cardholder data to derive real-time indicators of consumer spending QMI").

## Time Series Analysis

This project utilizes the indexed rolling 7-day average total spend value from the spending by sector data to identify trends and forecast 28 days ahead. For the analysis, I will use the following methods: exponential smoothing, ARIMA, and forecasting using Prophet.

After some initial cleaning of dataset to ensure it is in the correct format to conduct time series analysis in R, figure 1 shows plot of the spending over time shows how these levels changed over the course of the pandemic.

```{r}
#| echo: false

rs3 |> ggplot(aes(y = Total, x = Date)) +
                  geom_line()+
  labs(y = "Spend (£)",
         title = "Revolut debit card spening 7-day rolling average")+
   geom_hline(aes(yintercept = 100), linetype = 3)+
  annotate("text", x = rs3$Date[1000], y = 103, label="Index: 100 = February 2020 mean value", size = 2)+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

In general, what we can see is a clear upward trend across the three years and some seasonality exhibited around August and December-January. While the initial lockdown might be easily identifiable by the sharp dip during Q1 2020, it may be helpful to provide a reminder of all the restrictions implemented during the pandemic, and the plot below adds further context.

The red lines are indicative of the main lockdowns and the restrictions imposed due to the emergence of the Omicron variant in late 2021. Although there were many stages of 'unlocking' of restrictions, I have chosen to highlight two key moments with green lines.

```{r}
#| echo: false

rs3 |> ggplot(aes(y = Total, x = Date)) +
                  geom_line()+
                  labs(y = "Spend (£)",
                       title = "Revolut debit card spening with COVID-19 restrictions")+
    geom_hline(aes(yintercept = 100), linetype = 3)+
    geom_vline(aes(xintercept = Date[86]),
               linetype = 4, colour = "#EA526F", linewidth = 1)+
    geom_vline(aes(xintercept = Date[310]),
               linetype = 4, colour = "#EA526F", linewidth = 1)+
    geom_vline(aes(xintercept = Date[370]),
               linetype = 4, colour = "#EA526F", linewidth = 1)+
    geom_vline(aes(xintercept = Date[708]),
               linetype = 4, colour = "#EA526F", linewidth = 1)+
    geom_vline(aes(xintercept = Date[216]),
               linetype =2, colour = "#49DCB1", linewidth = 1)+
    geom_vline(aes(xintercept = Date[786]),
               linetype = 2, colour = "#49DCB1", linewidth = 1)+
    annotate("text", x = rs3$Date[770], y = 68, label="Living with Covid Plan implemented", angle=90, size = 2)+
    annotate("text", x = rs3$Date[200], y = 120, label="Eat Out To Help Out", angle=90, size = 2)+
    annotate("text", x = rs3$Date[70], y = 120, label="Lockdown #1", angle=90, size = 2)+
    annotate("text", x = rs3$Date[295], y = 120, label="Lockdown #2", angle=90, size = 2)+
    annotate("text", x = rs3$Date[355], y = 120, label="Lockdown #3", angle=90, size = 2)+
    annotate("text", x = rs3$Date[690], y = 70, label="Omicron restrictions", angle=90, size = 2)+
    theme_bw()+
    theme(plot.title = element_text(face="bold"))

```

The first of these easing periods is the Eat Out To Help Out programme during August 2020 which offered discounted meals in pubs, restaurants, and other hospitality outlets to support the sector. The second is in February 2022 when official COVID-19 restrictions were ended under the Living With Covid Plan. As a result of these two interventions, we can clearly identify periods of sustained spending as people had greater freedom of movement in their daily lives.

In spite of this, plotting the years against each reveals patterns in the second half of the year, particularly through Q4, that are broadly similar.

```{r}
#| echo: false

rs3 |> gg_season(Total, labels = "both")+
labs(y = "Spend (£)",
     title = "Revolut debit card spending by year")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

### Exponential Smoothing

#### Holt's method with trend

For this dataset I have chosen to experiment with the exponential smoothing method with trend and then later add in the seasonality component to determine if this improves the forecast.

```{r}
#| echo: true

fit <- rs3 |>
  model(
    `Holt's method` = ETS(Total ~ error("A") + trend("A") + season("N"))
  )
fabletools::report(fit)
```

This trended exponential smoothing model has a very high alpha value indicating that values in the past are given less weight than more recent values due to the exponential decaying built into the model. In addition, the beta value is high and this takes into changes in the data.

Plotting the forecast of the next 28 days sees quite a steady decline in the mean value and quite a wide distribution across both the 80% and 95% intervals, with the lower and upper bounds of the 95% interval ranging below 0 and close to 300.

```{r}
#| echo: false

fc <- fit |> forecast(h = 28)
fc |> autoplot(rs3)+
labs(y = "Spend (£)",
     title = "Exponential smoothing: Holt's method trend")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

Given the macroeconomic conditions in the British economy are have not been particularly positive, this decline might not seem unreasonable and the model may benefit from the introduction of some level of dampening so as not to over-forecast.

```{r}
#| echo: true

fit2 <- rs3 |>
    model(`Damped Holt's method` = ETS(Total ~ error("A") +
                                         trend("Ad") + season("N"))
    )
fabletools::report(fit2)
```

The model estimates phi, the dampening coefficient, to be 0.80 and we see a slight decrease in the alpha and increase beta values. This dampened model also performs better compared top the previous model when we compare AIC, AICc, and BIC values. The table below compares the two models and we can see that the damped Holt's method has a lower RMSE so makes it a better choice.

```{r}
#| echo: true

rs3 |> 
    model(
        `Holt's method` = ETS(Total ~ error("A") + trend("A") + season("N")),
        `Damped Holt's method` = ETS(Total ~ error("A") +
                                         trend("Ad") + season("N"))
        ) |> accuracy()
```

The forecasts from the damped model also exhibit less variability in the 80% and 95% intervals than the earlier model.

```{r}
#| echo: false


fc2 <- fit2 |> forecast(h = 28)
fc2 |> autoplot(rs3) +
labs(y = "Spend (£)",
     title = "Exponential smoothing: Damped Holt's method trend")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

When comparing the two forecasts, the dampened forecast, unsurprisingly, decreases less rapidly or as extreme at the median value.

```{r}
#| echo: false

rs3 |> 
    model(
        `Holt's method` = ETS(Total ~ error("A") +
                                  trend("A") + season("N")),
        `Damped Holt's method` = ETS(Total ~ error("A") +
                                         trend("Ad") + season("N"))
    ) |>
    forecast(h = 15) |> 
    autoplot(rs3, level = NULL) +
    labs(title = "Revolut debit card spending with exponential smoothing forecasts",
         y = "Spend (£)") +
    guides(colour = guide_legend(title = "Forecast method"))+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

### Holt-Winters' method with seasonality

To add in a seasonality component to the model we can use the Holt-Winters' method either with an additive seasonality component, which assumes the seasonal variations within the time series to be approximately constant, or multiplicative seasonality component, where the assumption is that the variations are proportional to the level of the series.

With the initial modelling, we can see that the additive model performs better with its lower AIC, AICc, and BIC values, in addition to lower MSE and AMSE values.

```{r}
#| echo: false
#| warning: false


fit3 <- rs3 |> 
    model(
        Additive = ETS(Total ~ error("A") + trend("A") + season("A")),
        Multiplicative = ETS(Total ~ error("M") + trend("A") + season("M"))
    )
fabletools::report(fit3)
```

The difference between the two models is evident when forecasting the next 28 days, with the mean values for additive model increasing while the multiplicative model shows a decline.

```{r}
#| echo: false
#| warning: false


fc3 <- fit3 |> forecast(h = 28)
fc3 |> autoplot(rs3, facets = TRUE)+
    labs(title = "Exponential smoothing: Holt-Winters' method with seasonality",
         y = "Spend (£)")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

Similarly, the RMSE for the additive model is better than multiplicative one, although it does not perform as well as the RMSE for the damped Holt's method above.

```{r}
#| echo: false
#| warning: false


fit3 |> accuracy()
```

However, it is possible to combine the dampened trend method with both additive and multiplicative seasonality. Both models see a drop in MSE and the AIC, AICc, and BIC values fall significantly, with the dampened multiplicative Holt Winter's method having very similar values to the dampened Holt's method. The RMSE value improves but not to the extent that either model match the model using damped Holt's method.

```{r}
#| echo: false
#| warning: false


fit4 <- rs3 |> 
    model(
        Additive = ETS(Total ~ error("A") + trend("Ad") + season("A")),
        Multiplicative = ETS(Total ~ error("M") + trend("Ad") + season("M"))
    )
fabletools::report(fit4)
```

```{r}
#| echo: false
#| warning: false


fit4 |> accuracy()
```

The plot here of the 28 day ahead forecast exhibits shallower increases for both models and a narrower set of intervals at 80% and 95%.

```{r}
#| echo: false
#| warning: false

fc4 <- fit4 |> forecast(h = 28)
fc4 |> autoplot(rs3)+theme_bw()+
    labs(title = "Damped exponential smoothing: Holt-Winters'\nmethod with seasonality",
         y = "Spend (£)")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))

```

#### Model selection

Having previously worked through a number of combinations of exponential smoothing models, both with and without dampening or seasonality, it seems that the damped Holt's method without seasonality performed best when comparing AICc and RMSE values. However, it's possible to employ the ETS() function in R to generate a model that minimises the AICc value.

```{r}
#| echo: false
#| warning: false

rs3 |> 
    model(
        `R Preferred` = ETS(Total)
    ) |> report()
```

Comparisons between this preferred model and the damped Holt's model from earlier are below:

```{r}
#| echo: false
#| warning: false

rs3 |> 
    model(
        `R Preferred` = ETS(Total),
        `Damped Holt's method` = ETS(Total ~ error("A") +
                                         trend("Ad") + season("N"))
    ) |> report()
```

```{r}
#| echo: false
#| warning: false

rs3 |> 
    model(
        `R Preferred` = ETS(Total),
        `Damped Holt's method` = ETS(Total ~ error("A") +
                                         trend("Ad") + season("N"))
    ) |> accuracy()
```

The output above tells us the model preferred by R uses Holt's method where the error is multiplicative (rather than additive as has been used in the examples above), with an additive trend that is dampened. The value for alpha is very high, reflecting how the weight of the past observations decays quite rapidly. The AICc value is the lowest of all the models we have tested above.

The forecast of the next 28 days reflects the marginal decline exhibited in some of the other dampened models above. Given that the alpha value is relatively high it is not unsurprising that this model forecasts the mean value to be close to the total 7-day average spend in 2023.

```{r}
#| echo: false
#| warning: false

rs3 |> model(`R Preferred` = ETS(Total)) |> forecast(h = 28) |> autoplot(rs3) +
    labs(title = "R's preferred model: ETS(M,Ad,N)",
         y = "Spend (£)")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))

```

We can use cross-validation based on a rolling forecasting origin, starting at the end of 2022 (chosen due to the impact of the pandemic prior to that) and increasing by one step each time. The result of this process is that the model preferred by R performs the best both when comparing AICc and RMSE.

```{r}
#| echo: false
#| warning: false

rs_fit <- rs3 |> model(`R Preferred` = ETS(Total),
                       `Damped Holt's method` = ETS(Total ~ error("A") + trend("Ad") + season("N"))) |> report()
rs_fit
```

```{r}
#| echo: false
#| warning: false

rs3_tr <- rs3 |> 
    stretch_tsibble(.init = 1096, .step = 1)
rs3_tr |>
    model(`R Preferred` = ETS(Total),
          `Damped Holt's method` = ETS(Total ~ error("A") + trend("Ad") + season("N")))|>
              forecast(h = 28) |>
              accuracy(rs3)
```

Checking the residuals of R's preferred model, we can see that the innovation residuals appear to have a constant variance and mean of zero. The histogram exhibits some degree of normality although the peak is a little high. The ACF plot have a number of significant that decay exponentially.

```{r}
#| echo: false
#| warning: false

best_fit <- rs3 |> model(ETS(Total ~ error("M") + trend("Ad") + season("N")))
gg_tsresiduals(best_fit)+
  ggtitle("Residuals of the R's preferred model")
```

In contrast to the damped Holt's method model, while the residuals have a mean of zero, the variance does appear to increase as we reach the end of 2022 and start 2023. The histogram is slightly left-skewed and peaks so may also fail the normality test. The ACF plot bears some similarity to R's preferred model with a number of significant lags and before decaying. Given this, R's preferred model seems to be the better model.

```{r}
#| echo: false
#| warning: false

best_damped <- rs3 |> model(`Damped Holt's method` = ETS(Total ~ error("A") + trend("Ad") + season("N")))
gg_tsresiduals(best_damped)+
  ggtitle("Residuals of the damped Holt's method model")
```

### ARIMA modelling

Looking at the initial plot of data above, it is clear that the data is not stationary and the ACF plot below shows the same data when it is not differenced up to lag 100. The lags remain significant are taking a long time to decay because each is correlated to the previous one. This makes sense when we consider that each daily value in the dataset relates to rolling 7-day average spend so we would expect correlation between the current and previous values.

```{r}
#| echo: false
#| warning: false

rs3 |> ACF(Total, lag_max = 100) |>
    autoplot() + labs(subtitle = "Revolut spending 7-day rolling average")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

To make the data stationary, I have had to apply a log transformation to stabilise the variance and first order differencing to stabilise the mean. The resulting plot has a number of significant spikes around the time of lockdown restrictions being introduced, but overall resembles white noise.

```{r}
#| echo: false
#| warning: false

rs3 |>
    ggplot(aes(x = Date, y =  difference(log(Total))))+
    geom_line()+ 
    labs(title = "Changes in Revolut spending 7-day rolling average - differenced")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))

```

The differenced ACF plot exhibits significant lags up to lag 6 before decaying away.

```{r}
#| echo: false
#| warning: false

rs3 |> ACF(difference(log(Total))) |>
    autoplot() + labs(subtitle = "Changes in Revolut spending 7-day rolling average - differenced")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))

```

It is also possible to confirm stationarity of this differenced data with a KPSS unit root test, which gives a small test statistic and a p-value of 0.1 and allows us to assume the data is stationary:

```{r}
#| echo: false
#| warning: false

(rs3 |> mutate(
    diff_total = difference(log(Total))
) |> features(diff_total, unitroot_kpss))
```

The time plot and ACF & PACF plots of the stationary data are show below.

```{r}
#| echo: false
#| warning: false

rs3 |> gg_tsdisplay(difference(log(Total)),lag_max = 100, plot_type = "partial")+
  ggtitle("Log transformed and differenced spending data")
```

Given the data is a 7-day rolling average and that the ACF plot appears to show a sinusodial and seasonal pattern of aproximately 7 days, a seasonal ARIMA model would be appropriate. In order to achieve this, I will let R try to find the best model order. The first is the default stepwise procedure and the second one works harder to search for a better model.

```{r}
#| echo: true
#| warning: false

ar_fit <- rs3 |> model(stepwise = ARIMA(Total),
             search = ARIMA(Total, stepwise=FALSE, approx = FALSE))
```

As we can from the output here, R has ARIMA(3,1,0)(1,0,1)~7~ for both models

```{r}
#| echo: false
#| warning: false

ar_fit |> pivot_longer(everything(), names_to = "Model name",
                    values_to = "Orders")
```

```{r}
#| echo: false
#| warning: false

glance(ar_fit) |> arrange(AICc) |> select(.model:BIC)
```

The residuals, as shown below, appear to have a constant mean and variance in the time plot and the ACF, whilst show some spikes appears consistent with white noise. However, the model fails the Ljung-Box text for white noise. This model is still left-skewed and peaks a little too high in the histogram, thus failing the normality test.

```{r}
#| echo: false
#| warning: false

ar_fit |> select(search) |> gg_tsresiduals(lag=100)+
  ggtitle("Residuals of ARIMA(3,1,0)(1,0,1)7 model")
```

```{r}
#| echo: false
#| warning: false

augment(ar_fit) |>
    filter(.model == "search") |>
    features(.innov, ljung_box, lag=100, dof=7)
```

Although this model does not pass all of the residual tests we can still use it to forecast, bearing in mind the limitations concerning the accuracy of prediction intervals. Forecasts for the next 28 days are shown below.

```{r}
#| echo: false
#| warning: false

forecast(ar_fit, h=28) |>
    filter(.model=="search") |>
    autoplot(rs3) +
    labs(title = "ARIMA(3,1,0)(1,0,1)7 model",
         y="Spend (£)")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

### Prophet

For an alternative approach, I have chosen to use [Meta's Prophet tool](https://facebook.github.io/prophet/) for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects.

In order to use package, the dataset had to be modified so the date variable was renamed 'ds' and the total variable as 'y'. In addition, Prophet allows for custom holidays to be added to the model to take into account national holidays that occur. The holidays function can also be used to deal with systemic shocks that would impact a time series so as to prevent the trend component capturing any peaks or troughs in the data. As such, I have created an additional tibble that holds the dates for the three UK lockdowns and the period of restrictions in place following the emergence of the omicron variant of COVID-19.

```{r}
#| echo: false
#| warning: false

df <- rs3 |> rename(
    ds = "Date",
    y = "Total"
)
head(df,5)

```

```{r}
#| echo: false
#| warning: false

lockdowns <- tibble(
holiday = c('lockdown_1', 'lockdown_2', 'lockdown_3', 'omicron'),
ds = as.Date(c('2020-03-26', '2020-11-05', '2021-01-05', '2021-12-08')),
lower_window = 0,
ds_upper = as.Date(c('2020-05-11', '2020-12-02', '2021-05-17', '2022-02-24')),
upper_window = 0)
lockdowns
```

With the data set up to, I started by modelling the time series with limited changes to the available parameters. However, the *changepoint_prior_scale* parameter was increased to make the trend more flexible and the seasonality mode changed from additive to multiplicative.

```{r}
#| echo: true
#| warning: false

m <- prophet(df, changepoint.prior.scale = 0.3, holidays = lockdowns, seasonality.mode = "multiplicative")

future <- make_future_dataframe(m, periods = 28)

forecast <- predict(m, future)

plot(m, forecast)+
    labs(title = "Prophet multiplicative model",
         y="Spend (£)",
        x="Date")+
  theme_bw()+
  theme(plot.title = element_text(face="bold"))
```

This interactive plot allows for the model to be viewed in more detail:

```{r}
#| echo: false
#| warning: false

dyplot.prophet(m, forecast)
```

Using Prophet we are able to decompose the model and look at each component separately.

```{r}
#| echo: false
#| warning: false


prophet_plot_components(m, forecast)
```

Finally, using cross-validation we can measure forecast error against historical data in a method akin to a rolling forecast origin used earlier. With Prophet I have chosen to select an initial period of 400 days (i.e. up to early February 2021) and made predictions every 90 days for a forecast horizon of 28 days. Based on the current time series, this corresponded to 9 forecasts.

```{r}
#| echo: true
#| warning: false


df.cv <- cross_validation(m, initial = 400, period = 90, horizon = 28, units = 'days')
```

Once computed, we can visualise a range of statistics of prediction performance. In the plot below, the dots show the absolute percentage error and the blue line the mean absolute percentage error over the forecast horizon. Forecast error here remains up to 10% for the first 12 days but then steadily increases to a maximum of around 15% for predictions 28 days out.

```{r}
#| echo: false
#| warning: false


df.p <- performance_metrics(df.cv)
head(df.p)
```

```{r}
#| echo: false
#| warning: false

plot_cross_validation_metric(df.cv, metric = 'mape')
```
